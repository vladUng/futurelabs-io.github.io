name: Deploy PolaroidMaker GitHub Page

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Validate HTML
        run: |
          # Install HTML validator
          sudo apt-get update
          sudo apt-get install -y tidy
          
          # Validate HTML files (allow warnings, fail on errors)
          echo "Validating HTML files..."
          find . -name "*.html" -type f | while read -r file; do
            echo "Validating $file"
            tidy -q -e "$file" || true
          done
          
      - name: Check CSS Syntax
        run: |
          # Basic CSS syntax check
          echo "Checking CSS syntax..."
          find . -name "*.css" -type f | while read -r file; do
            echo "Checking $file"
            # Basic syntax check - ensure file exists and is readable
            if [ -r "$file" ]; then
              echo "âœ“ $file is readable"
            else
              echo "âœ— $file is not readable"
              exit 1
            fi
          done
          
      - name: Check Links and Assets
        run: |
          echo "Checking for broken internal links..."
          
          # Check if all referenced CSS files exist
          if [ -f "index.html" ]; then
            grep -o 'href="[^"]*\.css"' index.html | sed 's/href="//g' | sed 's/"//g' | while read -r css_file; do
              # Remove leading slash and check if file exists
              css_path=${css_file#/}
              if [ -f "$css_path" ]; then
                echo "âœ“ CSS file found: $css_path"
              else
                echo "âœ— CSS file missing: $css_path"
                exit 1
              fi
            done
          fi
          
          # Check if favicon exists
          if [ -f "assets/favicon.ico" ]; then
            echo "âœ“ Favicon found"
          else
            echo "âš  Favicon not found (will use default)"
          fi
          
      - name: Optimize Images (if any)
        run: |
          echo "Checking for images to optimize..."
          
          # Check if assets directory exists
          if [ -d "assets" ]; then
            echo "Assets directory found"
            find assets -type f \( -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.gif" \) | while read -r img; do
              echo "Found image: $img"
              # Basic check - ensure image files are readable
              if [ -r "$img" ]; then
                echo "âœ“ Image is readable: $img"
              else
                echo "âœ— Image not readable: $img"
              fi
            done
          else
            echo "No assets directory found"
          fi
          
      - name: Generate sitemap
        run: |
          echo "Generating sitemap.xml..."
          cat > sitemap.xml << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
            <url>
              <loc>https://futurelabs-io.com/</loc>
              <lastmod>$(date +%Y-%m-%d)</lastmod>
              <changefreq>weekly</changefreq>
              <priority>1.0</priority>
            </url>
          </urlset>
          EOF
          
          # Replace the date placeholder
          sed -i "s/\$(date +%Y-%m-%d)/$(date +%Y-%m-%d)/g" sitemap.xml
          echo "âœ“ Sitemap generated"
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Report deployment
        run: |
          echo "ðŸš€ PolaroidMaker GitHub Page deployed successfully!"
          echo "ðŸ“± Visit: ${{ steps.deployment.outputs.page_url }}"
          echo "ðŸ”§ Built from commit: ${{ github.sha }}"
          echo "ðŸ“… Deployed at: $(date)"